<!DOCTYPE html>
<html lang="ja">
<head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Whiteframe</title>
<style>
  body { background:#000; color:#fff; font-family:sans-serif; text-align:center; padding:10px; }
  .controls select, .controls button, #imageInput { margin:5px; font-size:16px; padding:5px 8px; }
  #previewContainer { max-width:90vw; max-height:60vh; margin:10px auto; overflow:auto; }
  #preview { display:block; width:auto; height:auto; }
  #canvas { display:none; }
</style>
</head>
<body>
  <h1>Whiteframe</h1>
  <div class="controls">
    <input type="file" id="imageInput" accept="image/*"><br>
    <select id="ratioSelect">
      <option value="none">変更なし</option><option value="1:1">1:1</option><option value="3:2">3:2</option><option value="4:3">4:3</option><option value="16:9">16:9</option><option value="16:10">16:10</option><option value="2:1">2:1</option><option value="2.35:1">2.35:1</option><option value="3:1">3:1</option><option value="7:6">7:6</option><option value="5:4">5:4</option>
    </select>
    <button id="toggleOrientation">背景：横</button>
    <select id="borderSize"><option value="50">50px</option><option value="100" selected>100px</option><option value="200">200px</option></select>
    <button id="applyBtn">枠を追加</button>
  </div>
  <div id="previewContainer"><img id="preview" src="" alt="プレビュー"></div>
  <canvas id="canvas"></canvas>
  <script src="https://cdn.jsdelivr.net/npm/piexifjs"></script>
  <script>
    const inp = document.getElementById('imageInput'), pr = document.getElementById('preview'), cn = document.getElementById('canvas'), ctx = cn.getContext('2d');
    const ratioEl = document.getElementById('ratioSelect'), toggle = document.getElementById('toggleOrientation'), bEl = document.getElementById('borderSize'), btn = document.getElementById('applyBtn');
    let imgObj = null, exif = null, bgOrient = 'landscape';
    toggle.onclick = () => {
      bgOrient = bgOrient === 'landscape' ? 'portrait' : 'landscape';
      toggle.textContent = bgOrient === 'landscape' ? '背景：横' : '背景：縦';
    };
    inp.onchange = () => {
      const f = inp.files[0]; if (!f) return;
      const r = new FileReader();
      r.onload = e => { try { exif = piexif.load(e.target.result); } catch { exif = null; } };
      r.readAsBinaryString(f);
      const url = URL.createObjectURL(f), img = new Image();
      img.onload = () => { imgObj = img; draw(); };
      img.src = url;
    };
    btn.onclick = draw;
    pr.onclick = () => {}; // 新規タブ機能は削除
    function draw() {
      if (!imgObj) return;
      const b = +bEl.value, rv = ratioEl.value, [wR,hR] = rv==='none'?[imgObj.width,imgObj.height]:rv.split(':').map(Number);
      const oW = imgObj.width, oH = imgObj.height;
      // 背景比率方向に応じて論理比率を取る
      let bw = oW + 2*b, bh = oH + 2*b;
      if (rv!=='none') {
        const baseW = bgOrient==='landscape'? wR : hR, baseH = bgOrient==='landscape'? hR : wR;
        const imgRatio = oW/oH, targetRatio = baseW/baseH;
        if (imgRatio > targetRatio) {
          bw = oW + 2*b;
          bh = Math.round(bw / targetRatio);
        } else {
          bh = oH + 2*b;
          bw = Math.round(bh * targetRatio);
        }
      }
      cn.width = bw; cn.height = bh;
      ctx.clearRect(0,0,bw,bh);
      ctx.fillStyle = '#fff';
      ctx.fillRect(0,0,bw,bh);
      ctx.drawImage(imgObj, (bw-oW)/2, (bh-oH)/2, oW, oH);
      const full = cn.toDataURL('image/jpeg',0.92);
      pr.src = full;
      pr.removeAttribute('width');
      pr.removeAttribute('height');
      pr.style.display = 'block';
      pr.style.maxWidth = 'none';
      pr.style.maxHeight = 'none';
      // 保存用EXIF追加
      if (exif) pr.src = piexif.insert(piexif.dump(exif), full);
    }
  </script>
</body>
</html>
